module fr.labri.patterndetector.lang.Parser;

header {
    import java.util.concurrent.TimeUnit;

    import fr.labri.patterndetector.lang.AST.*;
    import static fr.labri.patterndetector.lang.AST.*;
    import static fr.labri.patterndetector.lang.Utils.*;
}

body {
    Rule _currentRule;
}

public Pair<Rule> script
    = EOL? EOF
    / rule EOL? EOF
    / (rule (void:EOL rule)*) EOL? EOF
    ;

Rule rule
    = n:SYMBOL n COLON n { Rule r = newRule(n);  _currentRule = r; }
    ((((m:match { _currentRule.appendPattern(m); })+ (c:condition { _currentRule.appendConstraint(c); })*)
    / (c:condition { _currentRule.appendConstraint(c); })+) EOL)*
    {yyValue = r; }
    ;

Expression condition
    = void:CONDITION n ( function / binary )
    ;

Expression function
    = SYMBOL n args { yyValue = null; }
    ;

Expression binary
    = a1:arg n o:operator n a2:arg n { yyValue = newFunctionCall(o, a1, a2); }
    ;

Pattern match
    = p:pattern n tl:(transition n)* { p.addTransitions(tl); } (s:sequence  n ntl:(transition* n) { p = newKleene(p); p.addAlias(s); p.addTransitions(ntl); })? { yyValue = p; }
    ;

Transition transition
    = '[' function ']' {yyValue = newTransition();}
    / SLASH restricted_match SLASH {yyValue = newNak();}
    ;

void restricted_match
    = SYMBOL
    ; // TODO restricted_match

Pattern pattern
  = s:SYMBOL n { Pattern p = newSimplePattern(s); } (COLON n a:SYMBOL n { p.addAlias(a); })? { yyValue = p; }
  / '(' n m:match* { Pattern p = newCompositePattern(m); } ')' n (COLON s:SYMBOL n { p.addAlias(s); })? { yyValue = p; }
  / REFERENCE n s:SYMBOL n { yyValue = newReferencePattern(s); }
  ;

String sequence
    = KLEENE {yyValue = null;} (COLON yyValue:SYMBOL)?
    ;

void args
    = arg n (',' n arg n)*
    ;

Expression arg
    = literal
    / selector
    ;

Selector selector
    = s:range ss:(void:'.' selector)* { yyValue = newSelector(s, ss); }
    ;

Selector range
    = s:SYMBOL r:(void:'[' range_spec void:']')? { yyValue = r != null ? newSequenceSelector(s, r) : newSelector(s); }
    ;

Pair<Expression> range_spec
    = l:simple_arith y:(void:RANGE r:simple_arith? { yyValue = makeList(null, r); })? { if (y != null) ((Pair<Expression>)y).setHead(l);
        yyValue = y == null ? new Pair(l) : (Pair<Expression>)y ; }
    / RANGE r:simple_arith { yyValue = makeList(null, r); }
    ;

Expression simple_arith
    = l:variable_or_number { yyValue = l; } y:(o:arith_symbol r:variable_or_number { yyValue = newFunctionCall(o, null, r); })? {
        if (y != null){
            ((FunctionCall)y)._args.set(0, l);
            yyValue = ((FunctionCall)y);
        }
    } // TODO Parentesis
    ;

Expression variable_or_number
    = s:SYMBOL { yyValue = newSelector(s); }
    / number
    ;
Expression literal
    = number
    / s:STRING { yyValue = newString(s); }
    / timeunit
    ;

NumberLiteral number
    = d:DECIMAL { yyValue = newNumber(d, 10); }
    / h:HEX { yyValue = newNumber(h, 16); }
    ;

TimeValue timeunit
    = v:(DECIMAL / HEX)
    ([dD] { yyValue = newTimeValue(v, TimeUnit.DAYS); }
    / [hH] { yyValue = newTimeValue(v, TimeUnit.HOURS); }
    / [mM][sS] { yyValue = newTimeValue(v, TimeUnit.MILLISECONDS); }
    / [uU][sS] { yyValue = newTimeValue(v, TimeUnit.MICROSECONDS); }
    / [nN][sS] { yyValue = newTimeValue(v, TimeUnit.NANOSECONDS); }
    / [mM] { yyValue = newTimeValue(v, TimeUnit.MINUTES); }
    / [sS] { yyValue = newTimeValue(v, TimeUnit.SECONDS); })
    ;

String KLEENE = '+';
String SLASH = '/' ;

String STRING = ["] (!["\\] _)* ["] ;

String operator
    = arith_symbol
    / ">=" / "<=" / '>' / '<' / '=' / "!="
    ;

String arith_symbol
    = '-' / KLEENE / '*' / SLASH
    ;

String RANGE = "..";

String SYMBOL = ([a-zA-Z][a-zA-Z0-9]*/[a-zA-Z0-9_]+);

void REFERENCE = '@';

String digit = [0-9];
String DECIMAL = digit+;

String hex_digit = [0-9a-fA-F] ;
String HEX = "0x" hex_digit+;

String COLON = ':';
String CONDITION = '#';

transient void n   = (Space / SLComment / MLComment)*;
transient void nn  = (Space / SLComment / MLComment)+;
transient void Space     = ' ' / '\t' / '\f';
transient void SLComment = "//" (![\n\r] _)* EOL;
transient void MLComment = "/*" (MLComment / !"*/" _)* "*/";
transient void EOL       = '\r' '\n' / '\r' / '\n';
transient void EOF       = !_;
